[{"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\api\\generate-mint-signature.js":"1","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\index.js":"2","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\learnmore.js":"3","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\listing\\[listingId].jsx":"4","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\listings.js":"5","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\preSale.js":"6","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\resell.tsx":"7","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\stake.tsx":"8","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\staking.tsx":"9","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\swaping.tsx":"10","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\upload.js":"11","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\userBalance.tsx":"12","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\_app.js":"13","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\_document.js":"14","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\besideNavbar.jsx":"15","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Footer.jsx":"16","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\memberPage.tsx":"17","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Navbar.jsx":"18","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\NavHoverBox.js":"19","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\NavItem.js":"20","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Sidebar.js":"21","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Sidebar1.js":"22","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\staked.tsx":"23","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\stakingfun\\index.tsx":"24","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\stakingfun\\mint.tsx":"25","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\NFTCard.tsx":"26","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\mainSwap.tsx":"27"},{"size":951,"mtime":1672402246000,"results":"28","hashOfConfig":"29"},{"size":10585,"mtime":1673721948637,"results":"30","hashOfConfig":"29"},{"size":1517,"mtime":1672402246000,"results":"31","hashOfConfig":"29"},{"size":23162,"mtime":1674075032285,"results":"32","hashOfConfig":"29"},{"size":36472,"mtime":1674395739395,"results":"33","hashOfConfig":"29"},{"size":8268,"mtime":1674411661226,"results":"34","hashOfConfig":"29"},{"size":7969,"mtime":1672402246000,"results":"35","hashOfConfig":"29"},{"size":7741,"mtime":1674410307587,"results":"36","hashOfConfig":"29"},{"size":16449,"mtime":1672402246000,"results":"37","hashOfConfig":"29"},{"size":1215,"mtime":1674410606165,"results":"38","hashOfConfig":"29"},{"size":10991,"mtime":1672402246000,"results":"39","hashOfConfig":"29"},{"size":8175,"mtime":1673697184514,"results":"40","hashOfConfig":"29"},{"size":806,"mtime":1672497215752,"results":"41","hashOfConfig":"29"},{"size":454,"mtime":1672402246000,"results":"42","hashOfConfig":"29"},{"size":4056,"mtime":1673179569453,"results":"43","hashOfConfig":"29"},{"size":2132,"mtime":1672402246000,"results":"44","hashOfConfig":"29"},{"size":4289,"mtime":1672402246000,"results":"45","hashOfConfig":"29"},{"size":10860,"mtime":1674129661132,"results":"46","hashOfConfig":"29"},{"size":1138,"mtime":1672474879038,"results":"47","hashOfConfig":"29"},{"size":1892,"mtime":1672955892760,"results":"48","hashOfConfig":"29"},{"size":3999,"mtime":1673631567743,"results":"49","hashOfConfig":"29"},{"size":4482,"mtime":1673635648454,"results":"50","hashOfConfig":"29"},{"size":5640,"mtime":1674262853422,"results":"51","hashOfConfig":"29"},{"size":1739,"mtime":1674223104063,"results":"52","hashOfConfig":"29"},{"size":1704,"mtime":1674259866800,"results":"53","hashOfConfig":"29"},{"size":1308,"mtime":1674223308534,"results":"54","hashOfConfig":"29"},{"size":3230,"mtime":1674411358739,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wrz2yj",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\api\\generate-mint-signature.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\learnmore.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\listing\\[listingId].jsx",["144","145","146"],[],"import {\n  MediaRenderer,\n  useContract,\n  useNetwork,\n  useNetworkMismatch,\n  useListing,\n  useContractRead,\n} from \"@thirdweb-dev/react\";\nimport {\n  Container,\n  Stack,\n  Flex,\n  Box,\n  Heading,\n  Text,\n  Input,\n  Button,\n  // Image,\n  Icon,\n  IconButton,\n  createIcon,\n  IconProps,\n  useColorModeValue,\n  Spinner,\n  Portal,\n} from \"@chakra-ui/react\";\nimport { ChainId, ListingType, NATIVE_TOKENS } from \"@thirdweb-dev/sdk\";\nimport { useRouter } from \"next/router\";\nimport React, { useContext, useState, useRef } from \"react\";\nimport {\n  MARKETPLACE_ADDRESS,\n  NFT_COLLECTION_ADDRESS,\n} from \"../../const/contractAddresses\";\nimport { ChainName } from \"../../const/aLinks\";\nimport styles from \"../../styles/Theme.module.css\";\nimport TwitterLogo from \"../../public/icons/Img.png\";\nimport Coin from \"../../public/icons/coin.jpeg\";\n\nimport Image from \"next/image\";\n\nconst activeChainId = parseInt(`${process.env.NEXT_PUBLIC_CHAIN_ID}`);\nconst contracAddress = NFT_COLLECTION_ADDRESS;\nconst contractType = \"ERC-721\";\nconst networkName = ChainName();\n\nexport default function ListingPage() {\n  const [copySuccess, setCopySuccess] = useState(\"\");\n  const TextRef = useRef(null);\n\n  const [closeBtn, setcloseBtn] = useState(true);\n  // const [changeColor, setchangeColor] = useState(1);\n\n\n  function copyToClipboard(e) {\n    TextRef.current.select();\n    document.execCommand(\"copy\");\n    // This is just personal preference.\n    // I prefer to not show the whole text area selected.\n    e.target.focus();\n    setCopySuccess(\"Berhasil di salin\");\n  }\n\n  const router = useRouter();\n  const { listingId } = router.query;\n  const ref = React.useRef();\n\n  const networkMismatch = useNetworkMismatch();\n  const [, switchNetwork] = useNetwork();\n\n  const { contract: marketplace } = useContract(\n    MARKETPLACE_ADDRESS,\n    \"marketplace\"\n  );\n  const { data: listing, isLoading: loadingListing } = useListing(\n    marketplace,\n    listingId\n  );\n\n  if (listing?.secondsUntilEnd === 0) {\n  }\n\n  const [bidAmount, setBidAmount] = useState(\"\");\n\n  const [changeColor, setchangeColor] = useState(1);\n\n  if (loadingListing) {\n    return (\n      <div className={styles.loading}>\n        <Spinner\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"blue.500\"\n          size=\"xl\"\n        />\n      </div>\n    );\n  }\n\n  if (!listing) {\n    return <div className={styles.loading}>Listing not found</div>;\n  }\n\n  async function createBidOrOffer() {\n    try {\n      // Ensure user is on the correct network\n      if (networkMismatch) {\n        switchNetwork &&\n          switchNetwork(Number(process.env.NEXT_PUBLIC_CHAIN_ID));\n        return;\n      }\n\n      // If the listing type is a direct listing, then we can create an offer.\n      if (listing?.type === ListingType.Direct) {\n        await marketplace?.direct.makeOffer(\n          listingId, // The listingId of the listing we want to make an offer for\n          1, // Quantity = 1\n          NATIVE_TOKENS[activeChainId].wrapped.address, // Wrapped Ether address on Goerli\n          bidAmount // The offer amount the user entered\n        );\n      }\n\n      // If the listing type is an auction listing, then we can create a bid.\n      if (listing?.type === ListingType.Auction) {\n        await marketplace?.auction.makeBid(listingId, bidAmount);\n      }\n\n      alert(\n        `${listing?.type === ListingType.Auction ? \"Bid\" : \"Offer\"\n        } created successfully!`\n      );\n    } catch (err) {\n      console.error(err.message || \"something went wrong\");\n      alert(err.message || \"something went wrong\");\n    }\n  }\n\n  async function buyNft() {\n    try {\n      // Ensure user is on the correct network\n      if (networkMismatch) {\n        switchNetwork &&\n          switchNetwork(Number(process.env.NEXT_PUBLIC_CHAIN_ID));\n        return;\n      }\n\n      // Simple one-liner for buying the NFT\n      await marketplace?.buyoutListing(listingId, 1);\n      alert(\"NFT bought successfully!\");\n    } catch (err) {\n      console.error(err);\n      alert(err.message);\n    }\n  }\n\n\n\n  return (\n    <>\n      <hr className=\"new4\" />\n\n      <div className=\"chawal\">\n        <div className=\"max-h-full px-3 space-y-5 overflow-y-auto bsbs\">\n          <div className=\"lg:block hfmm\">\n            <div className=\"bg-coal-dark border-2 border-coal-light rounded-xl fmm\">\n              <ul className=\"bg-coal-light bg-opacity-25 rounded-xl divide-y divide-coal-light fmm1\">\n                <li role=\"button\" className=\"p-1 ucc\">\n                  <a\n                    onClick={() => setchangeColor(1)}\n                    className={\n                      changeColor != 1\n                        ? \"flex items-center hover:bg-opacity-25 hover:bg-coal-light asa justify-between py-2 px-3 rounded-md cursor-pointer transition bg-coal-light bg-opacity-75 mk\"\n                        : \"flex items-center justify-between py-2 px-3 rounded-md cursor-pointer asa text-xenos-500 bg-opacity-25   bg-coal-light mk\"\n                    }\n                  >\n                    <span className=\"font-hand text-xl fg fgg2\">All Listings</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"-mr-1 w-5 h-5 fill-current transition icon sprite-icons\"\n                    >\n                      <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-chevron-right\"></use>\n                    </svg>\n                  </a>\n                </li>\n                <li className=\"p-1 ucc\">\n                  <a\n                    onClick={() => setchangeColor(2)}\n                    className={\n                      changeColor != 2\n                        ? \"flex items-center justify-between py-2 px-3 rounded-md asa cursor-pointer transition  hover:bg-opacity-25 hover:bg-coal-light mk\"\n                        : \"flex items-center justify-between py-2 px-3 rounded-md asa cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light  text-xenos-500 mk\"\n                    }\n                  >\n                    <span className=\"font-hand text-xl fg\">NFTs</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"-mr-1 w-5 h-5 fill-current transition icon sprite-icons\"\n                    // style={{ display: \"none\" }}\n                    >\n                      <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-chevron-right\"></use>\n                    </svg>\n                  </a>\n                </li>\n                <li className=\"p-1 ucc\">\n                  <a\n                    onClick={() => setchangeColor(3)}\n                    className={\n                      changeColor != 3\n                        ? \"flex items-center justify-between py-2 px-3 rounded-md cursor-pointer transition asa hover:bg-opacity-25 hover:bg-coal-light mk\"\n                        : \"flex items-center justify-between py-2 px-3 rounded-md cursor-pointer transition asa hover:bg-opacity-25 hover:bg-coal-light text-xenos-500 mk\"\n                    }\n                  >\n                    <span className=\"font-hand text-xl fg\">Whitelists</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"-mr-1 w-5 h-5 fill-current transition icon sprite-icons\"\n                    // style={{ display: \"none\" }}\n                    >\n                      <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-chevron-right\"></use>\n                    </svg>\n                  </a>\n                </li>\n                <li className=\"p-1 ucc\">\n                  <a\n                    onClick={() => setchangeColor(4)}\n                    className={\n                      changeColor != 4\n                        ? \"flex items-center asa justify-between py-2 px-3 rounded-md cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light\"\n                        : \"flex items-center asa justify-between py-2 px-3 rounded-md cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light text-xenos-500\"\n                    }\n                  >\n                    <span className=\"font-hand text-xl fg fgg1\">\n                      Clothing and Apparel\n                    </span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"-mr-1 w-5 h-5 fill-current transition icon sprite-icons\"\n                      style={{ display: \"none\" }}\n                    >\n                      <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-chevron-right\"></use>\n                    </svg>\n                  </a>\n                </li>\n                <li className=\"p-1 ucc\">\n                  <a\n                    onClick={() => setchangeColor(5)}\n                    className={\n                      changeColor != 5\n                        ? \"flex items-center asa justify-between py-2 px-3 rounded-md cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light po0\"\n                        : \"flex items-center asa justify-between py-2 px-3 rounded-md cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light text-xenos-500 po0\"\n                    }\n                  >\n                    <span className=\"font-hand text-xl fg\">Custom Items</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"-mr-1 w-5 h-5 fill-current transition icon sprite-icons\"\n                    // style={{ display: \"none\" }}\n                    >\n                      <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-chevron-right\"></use>\n                    </svg>\n                  </a>\n                </li>\n                <li className=\"p-1 ucc\">\n                  <a\n                    onClick={() => setchangeColor(6)}\n                    className={\n                      changeColor != 6\n                        ? \"flex items-center asa justify-between py-2 px-3 rounded-md cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light\"\n                        : \"flex items-center asa justify-between py-2 px-3 rounded-md cursor-pointer transition hover:bg-opacity-25 hover:bg-coal-light text-xenos-500\"\n                    }\n                  >\n                    <span className=\"font-hand text-xl fg fgg1\">Experiences</span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"-mr-1 w-5 h-5 fill-current transition icon sprite-icons\"\n                      style={{ display: \"none\" }}\n                    >\n                      <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-chevron-right\"></use>\n                    </svg>\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div>\n          </div>\n        </div>\n      </div>\n\n      <img\n        className=\"iimg iimg11\"\n        src=\"https://ik.imagekit.io/alienfrens/app-assets/background-market.jpg\"\n        alt=\"\"\n      />\n\n      <Container maxW={\"5xl\"}>\n        <Stack\n          align={\"center\"}\n          spacing={{ base: 8, md: 10 }}\n          py={{ base: 20, md: 28 }}\n          direction={{ base: \"column\", md: \"row\" }}\n        >\n          <Flex\n            flex={1}\n            justify={\"center\"}\n            align={\"center\"}\n            position={\"relative\"}\n            w={\"full\"}\n          >\n            <Box\n              position={\"relative\"}\n              height={\"auto\"}\n              rounded={\"2xl\"}\n              boxShadow={\"2xl\"}\n              width={\"full\"}\n              overflow={\"hidden\"}\n            >\n              <MediaRenderer\n                src={listing.asset.image}\n                fit={\"cover\"}\n                align={\"center\"}\n                w={\"100%\"}\n                h={\"100%\"}\n                className=\"fetImg\"\n                style={{\n                  objectFit: \"cover\",\n                  objectPosition: \"center\",\n                  margin: \"auto\",\n                }}\n              />\n            </Box>\n            <div className=\"links links1\">\n              <h2>Links</h2>\n              <Image src={TwitterLogo} alt=\"\" height={30} width={30} />\n            </div>\n          </Flex>\n          <Stack\n            flex={1}\n            spacing={{ base: 5, md: 10 }}\n            style={{ marginBottom: \"35px\" }}\n          >\n            <Heading\n              lineHeight={1.1}\n              fontWeight={600}\n              fontSize={{ base: \"3xl\", sm: \"4xl\", lg: \"5xl\" }}\n            >\n              <Text\n                as={\"span\"}\n                position={\"relative\"}\n                className=\"tg\"\n              // _after={{\n              //   content: \"''\",\n              //   width: 'full',\n              //   height: '30%',\n              //   position: 'absolute',\n              //   bottom: 1,\n              //   left: 0,\n              //   bg: 'blue.200',\n              //   zIndex: -1,\n              // }}\n              >\n                {/* {listing.asset.name} */}\n                The Golden Fren Luxury Wallet\n              </Text>\n              <br />\n              {/* <Text as={\"span\"} className=\"caa\"> */}\n              {/* Owned by <b>{listing.sellerAddress?.slice(0, 7)}</b> */}\n              {/* CLOTHING AND APPAREL\n              </Text> */}\n            </Heading>\n            <Box\n              bg=\"white.400\"\n              color=\"white\"\n              textAlign=\"left\"\n              padding=\"10px\"\n              className={styles.portalW}\n            >\n              <Text color={\"gray.500\"} style={{ fontSize: 15 }}>\n                <b>{listing.asset.description}</b>\n              </Text>\n              <br />\n              <Portal containerRef={ref}></Portal>\n              <Box ref={ref} className=\"detail-box\">\n                Wallet Detail:\n                <Text fontSize={\"sm\"} style={{ marginTop: \"20px\" }}>\n                  <b> ID token: {listing.asset.id}</b>\n                  <br />\n                  <br />\n                  <b> Type: {contractType}</b>\n                  <br />\n                  <br />\n                  <b> Chain: {networkName}</b>\n                </Text>\n                {document.queryCommandSupported(\"copy\") && (\n                  <div>\n                    <Text>\n                      <br />\n                      <b>Contract:</b>{\" \"}\n                      <Button\n                        onClick={copyToClipboard}\n                        variant={\"link\"}\n                        colorScheme={\"blue\"}\n                        title={\"Salin\"}\n                      >\n                        {\" \"}\n                        {contracAddress\n                          .slice(0, 3)\n                          .concat(\"...\")\n                          .concat(contracAddress.slice(-4))}\n                      </Button>\n                    </Text>\n                    {copySuccess}\n                  </div>\n                )}\n                <form style={{ position: \"fixed\", bottom: \"-9999px\" }}>\n                  <input\n                    style={{ height: \"0px\" }}\n                    ref={TextRef}\n                    value=\"0xd928c0977ae3dbc6561e4731d388e4335c24ed5a\"\n                  />\n                </form>\n              </Box>\n            </Box>\n\n            {/* <div className=\"links\">\n            <span>\n              <Image src={Coin} height={40} width={40} className=\"c-coin\" />\n            </span>\n            <h2>\n              <b>{listing.buyoutCurrencyValuePerToken.displayValue}</b>{\" \"}\n            {listing.buyoutCurrencyValuePerToken.symbol}\n            </h2>\n            <Button\n\t\t\t  width={'248px'}\n              rounded={'full'}\n              size={'md'}\n              fontWeight={'normal'}\n              px={6}\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              _hover={{ bg: 'blue.600' }}\n              onClick={buyNft}\n\t\t\t  style={{fontWeight: 700, color: 'white'}}>\n              Buy\n            </Button>\n          </div> */}\n\n\n\n            {/* <Text color={'gray.500'} style={{fontSize: 25}}>\n            <b>{listing.buyoutCurrencyValuePerToken.displayValue}</b>{\" \"}\n            {listing.buyoutCurrencyValuePerToken.symbol}\n          </Text>\n          <Stack\n            spacing={{ base: 4, sm: 6 }}\n            direction={{ base: 'column', sm: 'row', }}\n\t\t\tstyle={{margin: '20px auto'}}>\n            <Button\n\t\t\t  width={'248px'}\n              rounded={'full'}\n              size={'md'}\n              fontWeight={'normal'}\n              px={6}\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              _hover={{ bg: 'blue.600' }}\n              onClick={buyNft}\n\t\t\t  style={{fontWeight: 700, color: 'white'}}>\n              Buy\n            </Button>\n          </Stack> */}\n          </Stack>\n        </Stack>\n      </Container>\n      <div className=\"\">\n        <div className=\"block bg-coal-light bg-coal-light1 bg-opacity-50 rounded-2xl border-2 border-coal-light overflow-hidden ffl\">\n          <div className=\"py-6 px-6\">\n            <div className=\"flex flex-wrap items-start -m-3\">\n              <div className=\"flex items-start w-full lg:w-1/2\">\n                <div className=\"flex flex-col justify-between w-1/2 p-3\">\n                  <div className=\"text-sm text-gray-300 ticketprice\">\n                    Ticket price\n                  </div>\n                  <div className=\"inline-flex items-center mt-1\">\n                    <img\n                      src=\"https://gateway.pinata.cloud/ipfs/QmVgAZjazqRrETC4LFhA3t4sZt6VyesVisEqCvgRmd4gHZ?_gl=1*1junjl0*_ga*MTM0NzM3MDM2OC4xNjczNjQ0MzY4*_ga_5RMPXG14TE*MTY3NDA3NDI0OS41LjAuMTY3NDA3NDI1MC41OS4wLjA.\"\n                      // src=\"https://ik.imagekit.io/alienfrens/tr:w-64,h-64,q-100/coin/fren-coin_11BlmRl48.png\"\n                      // src={Coin}\n                      width={72}\n\n                      height={72}\n                      className=\"mr-3 mt-1 imgprice\"\n                    />\n                    <span className=\"inline-flex text-3xl font-semibold font-hand mt-10px\">\n                      1.00\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex-1 p-3\">\n                <div className=\"flex flex-wrap items-center -m-3\">\n                  <div className=\"w-full xs:w-28 p-3\">\n                    <input\n\n                      type=\"number\" id=\"quantity\" name=\"quantity\"\n                      // defaultvalue=\"1\"\n                      defaultValue={1}\n                      className=\"text-sm flex w-full px-5 bg-coal-dark cola text-sm md:text-base text-coal-100 placeholder-coal-200 transition ease-in-out border-2 border-coal-400 rounded-xl shadow-sm focus:border-gray-400 focus:ring-3 focus:ring-gray-400 focus:outline-none focus:ring-opacity-20 disabled:opacity-50 disabled:cursor-not-allowed bg-none h-12 \"\n                    />\n                  </div>\n                  <div className=\"flex-1 p-3\">\n                    <button className=\"w-full af-button  af-button--xenos\">\n                      Buy Ticket\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"block py-5 px-5 md:px-6 bg-coal-dark border-t-2 border-coal-light\">\n            <div className=\"flex flex-col md:flex-row justify-between md:justify-start space-y-4 md:space-y-0 md:space-x-4\">\n              <div className=\"inline-flex items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"mr-3 w-6 h-6 text-gray-300 fill-current icon sprite-icons\"\n                >\n                  <use href=\"/_nuxt/90542362d159cf028adfa51646312af4.svg#i-clock\"></use>\n                </svg>\n                <span className=\"text-gray-300 tt\">Ticket sale ends at</span>\n              </div>\n              <span className=\"tt1\">January 8, 2023 12:00 AM (UTC)</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"py-6 px-6 ssl\">\n        <div className=\"flex flex-col md:flex-row -m-3 ssl1\">\n          <div className=\"w-full md:w-1/4 p-3\">\n            <div className=\"text-sm text-gray-300\">\n              Tickets supply\n            </div>\n            <div className=\"mt-3 text-sm font-bold\">\n              unlimited\n            </div>\n          </div>\n          <div className=\"w-full md:w-1/4 p-3\">\n            <div className=\"text-sm text-gray-300\">\n              Raffle winners\n            </div>\n            <div className=\"mt-3 text-sm font-bold\">\n              20\n            </div>\n          </div>\n          <div className=\"w-full md:w-1/2 p-3\">\n            <div className=\"text-sm text-gray-300\">\n              Raffle draw\n            </div>\n            <div className=\"mt-3 text-sm font-bold\">\n              after sale end\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"border-2 border-coal-light rounded-2xl bg-coal-dark ttl\">\n        <div className=\"border-b-2 border-coal-light\">\n          <ul className=\"flex flex-col sm:flex-row flex-wrap -mb-2px font-hand text-lg md:text-xl text-gray-300 text-center\">\n            <li className=\"flex-1 border-t-2 sm:border-0 border-coal-light ic\">\n              <button onClick={() => setchangeColor(1)} className={changeColor != 1 ? \"block py-4 px-6 rounded-t-lg  transition snipcss0-4-4-5\" : \"block py-4 px-6 rounded-t-lg border-b-2 transition snipcss0-4-4-5 text-xenos-500 border-xenos-500\"}>\n                Raffle winners\n                <span className=\"inline-block ml-1 text-base\">\n                  (0)\n                </span>\n              </button>\n            </li>\n            <li className=\"flex-1 border-t-2 sm:border-0 border-coal-light ic\">\n              <button onClick={() => setchangeColor(2)} className={changeColor != 2 ? \"block py-4 px-6 rounded-t-lg border-b-2 transition border-transparent hover:text-white hover:border-gray-500 snipcss0-4-7-8\" : \"block py-4 px-6 rounded-t-lg border-b-2 transition text-xenos-500 border-xenos-500\"}>\n                All entries\n                <span className=\"inline-block ml-1 text-base\">\n                  (1429)\n                </span>\n              </button>\n            </li>\n            <li className=\"flex-1 border-t-2 sm:border-0 border-coal-light ic\">\n              <button onClick={() => setchangeColor(3)} className={changeColor != 3 ? \"block py-4 px-6 rounded-t-lg border-b-2 transition border-transparent hover:text-white hover:border-gray-500 snipcss0-4-10-11\" : \"block py-4 px-6 rounded-t-lg border-b-2 transition  text-xenos-500 border-xenos-500\"} >\n                Your entries\n                <span className=\"inline-block ml-1 text-base\">\n                  (0)\n                </span>\n              </button>\n            </li>\n          </ul>\n        </div>\n        <div className=\"py-4\">\n          <div className=\"py-2 px-5 md:px-6 relative\">\n            <div className=\"py-6 text-center\">\n              <p className=\"text-gray-300\">\n                At this moment there are no winners.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </>\n  );\n}\n","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\listings.js",["147","148","149"],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\preSale.js",["150"],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\resell.tsx",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\stake.tsx",["151"],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\staking.tsx",["152"],[],"import {\n  useNetwork,\n  useNetworkMismatch,\n  ThirdwebNftMedia,\n  useAddress,\n  useTokenBalance,\n  useOwnedNFTs,\n  useContract,\n  useMetamask, useWalletConnect, useCoinbaseWallet,\n} from \"@thirdweb-dev/react\";\nimport {\n  Box,\n  Heading,\n  Container,\n  Text,\n  Button,\n  Stack,\n  Icon,\n  useColorModeValue,\n  createIcon,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  useDisclosure,\n  Menu,\n  MenuItem,\n  MenuDivider,\n  useToast,\n  Flex,\n  Tag,\n  Spinner,\n  Avatar,\n  Center,\n  Image,\n  SimpleGrid, Tabs, TabList, TabPanels, Tab, TabPanel\n} from '@chakra-ui/react';\nimport { BigNumber, ethers } from \"ethers\";\nimport type { NextPage } from \"next\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport React, { useContext, useRef, useEffect, useState } from \"react\";\nimport { NFT_COLLECTION_ADDRESS, TOKEN_DROP_ADDRESS, MEMBERPASS_CONTRACT_ADDRESS, NFT_STAKING_ADDRESS } from \"../const/contractAddresses\";\nimport MintMember from \"../components/memberPage\";\nimport styles from \"../styles/Theme.module.css\";\n\nconst nftCollection = NFT_COLLECTION_ADDRESS;\nconst tokenContractAddress = TOKEN_DROP_ADDRESS;\nconst stakingContractAddress = NFT_STAKING_ADDRESS;\n\nconst Stake: NextPage = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef();\n  // Wallet Connection Hooks\n  const address = useAddress();\n  const router = useRouter();\n\n  const networkMismatch = useNetworkMismatch();\n  const [, switchNetwork] = useNetwork();\n  const color = useColorModeValue('gray.800', 'gray.300');\n  const bgColor = useColorModeValue('white', 'gray.800');\n  \n  const connectWithMetamask = useMetamask();\n  const connectWithWalletConnect = useWalletConnect();\n  const connectWithCoinbaseWallet = useCoinbaseWallet();\n\n  const Toast = useToast({\n    position: 'top',\n    title: 'Salah Jaringan',\n    containerStyle: {\n      maxWidth: '100%',\n    },\n  })\n  \n  const { contract: editionDrop } = useContract(\n    MEMBERPASS_CONTRACT_ADDRESS,\n    \"edition-drop\"\n  );\n\n  // Contract Hooks\n  const { contract: nftCollection } = useContract(\n    NFT_COLLECTION_ADDRESS,\n    \"nft-collection\"\n  );\n\n  const { contract: tokenContract } = useContract(\n    TOKEN_DROP_ADDRESS,\n    \"token\"\n  );\n\n  const { contract } = useContract(stakingContractAddress);\n\n  // Load Unstaked NFTs\n  const { data: ownedNfts } = useOwnedNFTs(nftCollection, address);\n\n  // Load Balance of Token\n  const { data: tokenBalance } = useTokenBalance(tokenContract, address);\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Custom contract functions\n  ///////////////////////////////////////////////////////////////////////////\n  const [stakedNfts, setStakedNfts] = useState<any[]>([]);\n  const [claimableRewards, setClaimableRewards] = useState<BigNumber>();\n\n  useEffect(() => {\n    if (!contract) return;\n\n    async function loadStakedNfts() {\n      const stakedTokens = await contract?.call(\"getStakedTokens\", address);\n\n      // For each staked token, fetch it from the sdk\n      const stakedNfts = await Promise.all(\n        stakedTokens?.map(\n          async (stakedToken: { staker: string; tokenId: BigNumber }) => {\n            const nft = await nftCollection?.get(stakedToken.tokenId);\n            return nft;\n          }\n        )\n      );\n\n      setStakedNfts(stakedNfts);\n      console.log(\"setStakedNfts\", stakedNfts);\n    }\n\n    if (address) {\n      loadStakedNfts();\n    }\n  }, [address, contract, nftCollection]);\n\n  useEffect(() => {\n    if (!contract || !address) return;\n\n    async function loadClaimableRewards() {\n      const cr = await contract?.call(\"availableRewards\", address);\n      console.log(\"Loaded claimable rewards\", cr);\n      setClaimableRewards(cr);\n    }\n\n    loadClaimableRewards();\n  }, [address, contract]);\n\n  const {\n    data: memberNfts,\n    isLoading,\n    isError,\n  } = useOwnedNFTs(editionDrop, address);\n\n  if (!address) {\n    return (\n<>\n    <div className={styles.loading} style={{width: '100%'}}>\n      {!address ? (\n\t\t  <div className={styles.loading} style={{marginTop: '-96px'}}>\n      <h1 className={styles.h1} style={{fontFamily: 'Caveat'}}>& <br/>Stake Your NFTs</h1>\n\n      <br className={`${styles.divider} ${styles.spacerTop}`} />\n        <Stack flex={2} direction={{ md: 'row', base: 'column'}} spacing={{ base: 5, md: 5 }}>\n            <Button onClick={onOpen}\n              colorScheme={'green'}\n              bg={'green.400'}\n              rounded={'full'}\n              px={6}\n              _hover={{\n                bg: 'green.500',\n              }}>\n              Connect Wallet\n            </Button>\n\t\t\t<AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n\t\tmotionPreset='slideInBottom'\n\t\tisCentered\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent margin={'auto 10px'}>\n            <AlertDialogHeader fontSize='lg' fontWeight='bold'>\n              Connect Wallet\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              <Menu>\n                  <MenuDivider />\n                  <MenuItem gap='5' onClick={() => {connectWithMetamask(), onClose()}} className={styles.hoverItem}>Metamask\n\t\t\t\t  <Tag size='sm' variant='solid' colorScheme='blue' borderRadius='full'>\n\t\t\t\t\t  Recomended\n\t\t\t\t\t</Tag>\n\t\t\t\t\t</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithWalletConnect(), onClose()}} className={styles.hoverItem}>WalletConnect</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithCoinbaseWallet(), onClose()}} className={styles.hoverItem}>CoinBase</MenuItem>\n                  <MenuDivider />\n              </Menu>\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose} colorScheme='red'>\n                Cancel\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n            <Box style={{position: 'absolute', top: '-35px'}}>\n              <Icon\n                as={Arrow}\n                color={color}\n                w={71}\n                position={'absolute'}\n                right={-145}\n                top={'40px'}\n                transform={'rotate(-100deg)'}\n              />\n              <Text\n                fontSize={'lg'}\n                fontFamily={'Caveat'}\n                position={'absolute'}\n                right={'-105px'}\n                top={'-8px'}\n                transform={'rotate(10deg)'}>\n                Sign Your Wallet\n              </Text>\n            </Box>\n</Stack>\n\t\t  </div>\n      ) : (\n        <>\n        </>\n      )}\n\t</div>\n</>\n    );\n  }\n\n  // 1. Loading\n  if (isLoading) {\n    return \n\t\t  <div className={styles.loading}>\n\t\t  <Spinner\n\t\t\t  thickness='4px'\n\t\t\t  speed='0.65s'\n\t\t\t  emptyColor='gray.200'\n\t\t\t  color='blue.500'\n\t\t\t  size='xl' />\n          </div>;\n  }\n  \n  // Something went wrong\n  if (!memberNfts || isError) {\n    return <div className={styles.loading}>Error...!</div>;\n  }\n\n  // 2. No NFTs - mint page\n  if (memberNfts.length === 0 || networkMismatch) {\n    return (\n<>\n        <MintMember />\n</>\n    );\n  }\n  \n  // 3. Has NFT already - show button to take to staking\n  ///////////////////////////////////////////////////////////////////////////\n  // Write Functions\n  ///////////////////////////////////////////////////////////////////////////\n  async function stakeNft(id: string) {\n    if (!address) return;\n\n    const isApproved = await nftCollection?.isApproved(\n      address,\n      stakingContractAddress\n    );\n    // If not approved, request approval\n    if (!isApproved) {\n      await nftCollection?.setApprovalForAll(stakingContractAddress, true);\n    }\n    const stake = await contract?.call(\"stake\", id);\n  }\n\n  async function withdraw(id: BigNumber) {\n    const withdraw = await contract?.call(\"withdraw\", id);\n  }\n\n  async function claimRewards() {\n    const claim = await contract?.call(\"claimRewards\");\n  }\n\n  if (isLoading) {\n\t\t  <div className={styles.loading}>\n\t\t  <Spinner\n\t\t\t  thickness='4px'\n\t\t\t  speed='0.65s'\n\t\t\t  emptyColor='gray.200'\n\t\t\t  color='blue.500'\n\t\t\t  size='xl' />\n          </div>;\n  }\n\n  return (\n    <div className={styles.StakeContainer}>\n\n      {!address ? (\n\t\t  <div className={styles.loading} style={{marginTop: '-96px'}}>\n      <h1 className={styles.h1} style={{fontFamily: 'Caveat'}}>& <br/>Stake Your NFTs</h1>\n\n      <br className={`${styles.divider} ${styles.spacerTop}`} />\n        <Stack flex={2} direction={{ md: 'row', base: 'column'}} spacing={{ base: 5, md: 5 }}>\n            <Button onClick={onOpen}\n              colorScheme={'green'}\n              bg={'green.400'}\n              rounded={'full'}\n              px={6}\n              _hover={{\n                bg: 'green.500',\n              }}>\n              Connect Wallet\n            </Button>\n\t\t\t<AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n\t\tmotionPreset='slideInBottom'\n\t\tisCentered\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize='lg' fontWeight='bold'>\n              Connect Wallet\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              <Menu>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithMetamask(), onClose()}} className={styles.hoverItem}>Metamask</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithWalletConnect(), onClose()}} className={styles.hoverItem}>WalletConnect</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithCoinbaseWallet(), onClose()}} className={styles.hoverItem}>CoinBase</MenuItem>\n                  <MenuDivider />\n              </Menu>\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose} colorScheme='red'>\n                Cancel\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n            <Box style={{position: 'absolute', top: '-35px'}}>\n              <Icon\n                as={Arrow}\n                color={color}\n                w={71}\n                position={'absolute'}\n                right={-145}\n                top={'55px'}\n                transform={'rotate(-100deg)'}\n              />\n              <Text\n                fontSize={'lg'}\n                fontFamily={'Caveat'}\n                position={'absolute'}\n                right={'-105px'}\n                top={'10px'}\n                transform={'rotate(10deg)'}>\n                Sign Your Wallet\n              </Text>\n            </Box>\n</Stack>\n\t\t  </div>\n      ) : (\n        <>\n    <Container maxW={'5xl'} py={12}>\n      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10} marginBottom={{ base: 20, md: 0 }}>\n    <Center py={6}>\n      <Box\n        maxW={'100%'}\n        w={'full'}\n        bg={bgColor}\n        boxShadow={'2xl'}\n        rounded={'md'}\n        overflow={'hidden'}>\n        <Image\n          h={'120px'}\n          w={'full'}\n          src={\n            'https://images.unsplash.com/photo-1612865547334-09cb8cb455da?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80'\n          }\n          objectFit={'cover'}\n        />\n        <Flex justify={'center'} mt={-12}>\n          <Avatar\n            size={'xl'}\n            src={\n              'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ'\n            }\n            style={{\n              border: '2px solid white',\n            }}\n          />\n        </Flex>\n\n        <Box p={6}>\n          <Stack spacing={0} align={'center'} mb={5}>\n            <Heading fontSize={'2xl'} fontWeight={500} fontFamily={'body'}>\n              Your Token\n            </Heading>\n            <Text color={'gray.500'}>Staking Reward</Text>\n          </Stack>\n\n          <Stack direction={{ md: 'column', base: 'column'}} justify={'center'} spacing={6}>\n            <Stack spacing={0} align={'center'}>\n              <Text fontWeight={600}>\n                <b>{tokenBalance?.displayValue}</b> {tokenBalance?.symbol}</Text>\n              <Text fontSize={'sm'} color={'gray.500'}>\n                Balance\n              </Text>\n            </Stack>\n            <Stack spacing={0} align={'center'}>\n              <Text fontWeight={600}>\n                <b>\n                  {!claimableRewards\n                    ? \"Loading...\"\n                    : ethers.utils.formatUnits(claimableRewards, 18)}\n                </b>{\" \"}\n                {tokenBalance?.symbol}</Text>\n              <Text fontSize={'sm'} color={'gray.500'}>\n                Claimable\n              </Text>\n            </Stack>\n          </Stack>\n\n          <Button\n            onClick={() => claimRewards()}\n            w={'full'}\n            mt={8}\n            bg={bgColor}\n            color={'white'}\n            rounded={'md'}\n            _hover={{\n              transform: 'translateY(-2px)',\n              boxShadow: 'lg',\n            }}>\n            Claim Rewards\n          </Button>\n        </Box>\n      </Box>\n    </Center>\n\t\n      <Box my={6}\n        maxW={'100%'}\n        w={'full'}\n        bg={bgColor}\n        boxShadow={'2xl'}\n        rounded={'md'}\n        overflow={'hidden'}>\n<Tabs isFitted variant='enclosed'>\n  <TabList mb='1em'>\n    <Tab>Your Unstaked NFTs</Tab>\n    <Tab>Your Staked NFTs</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n            {ownedNfts?.map((nft) => (\n              <div className={styles.nftBox} key={nft.metadata.id.toString()}>\n                <ThirdwebNftMedia\n                  metadata={nft.metadata}\n                  className={styles.nftMedia}\n                />\n                <h3>{nft.metadata.name}</h3>\n                <button\n                  className={`${styles.mainButton} ${styles.spacerBottom}`}\n                  onClick={() => stakeNft(nft.metadata.id)}\n                >\n                  Stake\n                </button>\n              </div>\n            ))}\n    </TabPanel>\n    <TabPanel>\n            {stakedNfts?.map((nft) => (\n              <div className={styles.nftBox} key={nft.metadata.id.toString()}>\n                <ThirdwebNftMedia\n                  metadata={nft.metadata}\n                  className={styles.nftMedia}\n                />\n                <h3>{nft.metadata.name}</h3>\n                <button\n                  className={`${styles.mainButton} ${styles.spacerBottom}`}\n                  onClick={() => withdraw(nft.metadata.id)}\n                >\n                  Withdraw\n                </button>\n              </div>\n            ))}\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n        </Box>\n      </SimpleGrid>\n    </Container>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Stake;\n\nconst Arrow = createIcon({\n  displayName: 'Arrow',\n  viewBox: '0 0 72 24',\n  path: (\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M0.600904 7.08166C0.764293 6.8879 1.01492 6.79004 1.26654 6.82177C2.83216 7.01918 5.20326 7.24581 7.54543 7.23964C9.92491 7.23338 12.1351 6.98464 13.4704 6.32142C13.84 6.13785 14.2885 6.28805 14.4722 6.65692C14.6559 7.02578 14.5052 7.47362 14.1356 7.6572C12.4625 8.48822 9.94063 8.72541 7.54852 8.7317C5.67514 8.73663 3.79547 8.5985 2.29921 8.44247C2.80955 9.59638 3.50943 10.6396 4.24665 11.7384C4.39435 11.9585 4.54354 12.1809 4.69301 12.4068C5.79543 14.0733 6.88128 15.8995 7.1179 18.2636C7.15893 18.6735 6.85928 19.0393 6.4486 19.0805C6.03792 19.1217 5.67174 18.8227 5.6307 18.4128C5.43271 16.4346 4.52957 14.868 3.4457 13.2296C3.3058 13.0181 3.16221 12.8046 3.01684 12.5885C2.05899 11.1646 1.02372 9.62564 0.457909 7.78069C0.383671 7.53862 0.437515 7.27541 0.600904 7.08166ZM5.52039 10.2248C5.77662 9.90161 6.24663 9.84687 6.57018 10.1025C16.4834 17.9344 29.9158 22.4064 42.0781 21.4773C54.1988 20.5514 65.0339 14.2748 69.9746 0.584299C70.1145 0.196597 70.5427 -0.0046455 70.931 0.134813C71.3193 0.274276 71.5206 0.70162 71.3807 1.08932C66.2105 15.4159 54.8056 22.0014 42.1913 22.965C29.6185 23.9254 15.8207 19.3142 5.64226 11.2727C5.31871 11.0171 5.26415 10.5479 5.52039 10.2248Z\"\n      fill=\"currentColor\"\n    />\n  ),\n});\n","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\swaping.tsx",["153"],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\upload.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\userBalance.tsx",["154","155","156","157"],[],"import {\r\n    ThirdwebNftMedia,\r\n    useAddress,\r\n    useMetamask,\r\n    useTokenBalance,\r\n    useOwnedNFTs,\r\n    useContract,\r\n  } from \"@thirdweb-dev/react\";\r\n  import { BigNumber, ethers } from \"ethers\";\r\n  import type { NextPage } from \"next\";\r\n  import { useEffect, useState } from \"react\";\r\n  import styles from \"../styles/Theme.module.css\";\r\n  \r\n  const nftDropContractAddress = \"0x322067594DBCE69A9a9711BC393440aA5e3Aaca1\";\r\n  const tokenContractAddress = \"0x8C1Fc0162555ac29864A0E6f695582e63ABCd39e\";\r\n  const stakingContractAddress = \"0xB712975e13427ac804177E7CebF08781bbF9B89c\";\r\n  \r\n  const Stake: NextPage = () => {\r\n    // Wallet Connection Hooks\r\n    const address = useAddress();\r\n    const connectWithMetamask = useMetamask();\r\n  \r\n    // Contract Hooks\r\n    const { contract: nftDropContract } = useContract(\r\n      nftDropContractAddress,\r\n      \"nft-drop\"\r\n    );\r\n  \r\n    const { contract: tokenContract } = useContract(\r\n      tokenContractAddress,\r\n      \"token\"\r\n    );\r\n  \r\n    const { contract, isLoading } = useContract(stakingContractAddress);\r\n  \r\n    // Load Unstaked NFTs\r\n    const { data: ownedNfts } = useOwnedNFTs(nftDropContract, address);\r\n  \r\n    // Load Balance of Token\r\n    const { data: tokenBalance } = useTokenBalance(tokenContract, address);\r\n  \r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // Custom contract functions\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    const [stakedNfts, setStakedNfts] = useState<any[]>([]);\r\n    const [claimableRewards, setClaimableRewards] = useState<BigNumber>();\r\n  \r\n    useEffect(() => {\r\n      if (!contract) return;\r\n  \r\n      async function loadStakedNfts() {\r\n        const stakedTokens = await contract?.call(\"getStakedTokens\", address);\r\n  \r\n        // For each staked token, fetch it from the sdk\r\n        const stakedNfts = await Promise.all(\r\n          stakedTokens?.map(\r\n            async (stakedToken: { staker: string; tokenId: BigNumber }) => {\r\n              const nft = await nftDropContract?.get(stakedToken.tokenId);\r\n              return nft;\r\n            }\r\n          )\r\n        );\r\n  \r\n        setStakedNfts(stakedNfts);\r\n        console.log(\"setStakedNfts\", stakedNfts);\r\n      }\r\n  \r\n      if (address) {\r\n        loadStakedNfts();\r\n      }\r\n    }, [address, contract, nftDropContract]);\r\n  \r\n    useEffect(() => {\r\n      if (!contract || !address) return;\r\n  \r\n      async function loadClaimableRewards() {\r\n        const cr = await contract?.call(\"availableRewards\", address);\r\n        console.log(\"Loaded claimable rewards\", cr);\r\n        setClaimableRewards(cr);\r\n      }\r\n  \r\n      loadClaimableRewards();\r\n    }, [address, contract]);\r\n  \r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // Write Functions\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    async function stakeNft(id: string) {\r\n      if (!address) return;\r\n  \r\n      const isApproved = await nftDropContract?.isApproved(\r\n        address,\r\n        stakingContractAddress\r\n      );\r\n      // If not approved, request approval\r\n      if (!isApproved) {\r\n        await nftDropContract?.setApprovalForAll(stakingContractAddress, true);\r\n      }\r\n      const stake = await contract?.call(\"stake\", id);\r\n    }\r\n  \r\n    async function withdraw(id: BigNumber) {\r\n      const withdraw = await contract?.call(\"withdraw\", id);\r\n    }\r\n  \r\n    async function claimRewards() {\r\n      const claim = await contract?.call(\"claimRewards\");\r\n    }\r\n  \r\n    if (isLoading) {\r\n      return <div>Loading</div>;\r\n    }\r\n  \r\n    return (\r\n      // <div className={styles.container}>\r\n        \r\n      //   <hr className={`${styles.divider} ${styles.spacerTop}`} />\r\n  \r\n      //   {!address ? (\r\n      //     <>\r\n      //     <h1 className=\"cow cow1\">Connect Wallet</h1>\r\n      //      <h1 className=\"yn\">You need an Etherium wallet to use Ape Club</h1>\r\n      //     <button className={styles.mainButton} onClick={connectWithMetamask}>\r\n      //       Connect Wallet\r\n      //     </button>\r\n      //     </>\r\n      //   ) : (\r\n      //     <>\r\n      //       <h1 className={styles.yb}>Your Balance</h1>\r\n  \r\n      //       <div className={styles.tokenGrid}>\r\n             \r\n      //         <div className={styles.tokenItem}>\r\n      //           <h3 className={styles.tokenLabel}>Current Balance</h3>\r\n      //           <p className={styles.tokenValue}>\r\n      //             <b>{tokenBalance?.displayValue}</b> {tokenBalance?.symbol}\r\n      //           </p>\r\n      //         </div>\r\n      //       </div>\r\n  \r\n\r\n  \r\n\r\n      //     </>\r\n      //   )}\r\n      // </div>\r\n      <section className=\"relativ mttt\">\r\n      <div className=\"container container--narrow pb-16\">\r\n        <div className=\"border-b-2 border-coal-light\">\r\n          <ul className=\"flex flex-col sm:flex-row flex-wrap -mb-2px font-hand text-lg md:text-xl lg:text-2xl text-gray-300 text-center\">\r\n            <li className=\"sm:w-1/3 border-t-2 sm:border-0 border-coal-light\">\r\n              <a href=\"/me/wallet/\" className=\"block p-4 rounded-t-lg border-b-2 transition text-xenos-500 border-xenos-500\">\r\n                Overview\r\n              </a>\r\n            </li>\r\n            <li className=\"sm:w-1/3 border-t-2 sm:border-0 border-coal-light\">\r\n              <a href=\"/me/wallet/activity\" className=\"block p-4 rounded-t-lg border-b-2 transition border-transparent hover:text-white hover:border-gray-500\">\r\n                Wallet Activity\r\n              </a>\r\n            </li>\r\n            <li className=\"sm:w-1/3 border-t-2 sm:border-0 border-coal-light\">\r\n              <a href=\"/me/wallet/earnings\" className=\"block p-4 rounded-t-lg border-b-2 transition border-transparent hover:text-white hover:border-gray-500\">\r\n                Earnings Log\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"mt-10\">\r\n          <div>\r\n            <div className=\"flex flex-wrap -m-4 font-hand text-center\">\r\n              <div className=\"w-full sm:w-1/2 p-4\">\r\n                <div className=\"p-8 border-2 border-coal-light rounded-2xl bg-coal-dark\">\r\n                  <div className=\"text-xl font-semibold uppercase\">\r\n                    Wallet balance\r\n                  </div>\r\n                  <div className=\"inline-flex items-center mt-4\">\r\n                    <img src=\"https://gateway.pinata.cloud/ipfs/QmVgAZjazqRrETC4LFhA3t4sZt6VyesVisEqCvgRmd4gHZ\" width={50} height={50} className=\"mr-6\" />\r\n                    <span className=\"text-5xl\">\r\n                      0.00\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"w-full sm:w-1/2 p-4\">\r\n                <div className=\"p-8 border-2 border-coal-light rounded-2xl bg-coal-dark\">\r\n                  <div className=\"text-xl font-semibold uppercase\">\r\n                    Current earnings\r\n                  </div>\r\n                  <div className=\"inline-flex items-center mt-4\">\r\n                    <img src=\"https://gateway.pinata.cloud/ipfs/QmVgAZjazqRrETC4LFhA3t4sZt6VyesVisEqCvgRmd4gHZ\" width={50} height={50} className=\"mr-6\" />\r\n                    <span className=\"text-5xl\">\r\n                      0.00\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-10 p-8 border-2 border-coal-light rounded-2xl bg-coal-dark\">\r\n              <div className=\"flex flex-wrap sm:flex-nowrap items-center justify-between -m-4 text-center sm:text-left\">\r\n                <div className=\"w-full sm:w-auto text-lg p-4\">\r\n                  You are not currently eligible to earn coins!\r\n                </div>\r\n                <div className=\"w-full sm:w-auto p-4\">\r\n                  <a href=\"http://lilbabyapeclub.com/learn\" className=\"af-button--xenos whitespace-nowrap af-button \">\r\n                    Learn More\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    );\r\n  };\r\n  \r\n  export default Stake;","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\_app.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\_document.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\besideNavbar.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Footer.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\memberPage.tsx",["158"],[],"import {\n  Box,\n  Center,\n  useColorModeValue,\n  Heading,\n  Text,\n  Stack,\n  Image,\n  useToast,\n  Button\n} from '@chakra-ui/react';\nimport {\n  ThirdwebNftMedia,\n  useAddress,\n  useNetwork,\n  useNetworkMismatch,\n  useClaimNFT,\n  useActiveClaimCondition,\n  useContract,\n  useNFT\n} from \"@thirdweb-dev/react\";\nimport { BigNumber } from \"ethers\";\nimport React, { useState } from \"react\";\nimport { MEMBERPASS_CONTRACT_ADDRESS, INITIAL_TOKEN_PRICE } from \"../const/contractAddresses\";\nimport { RiSignalWifiErrorLine } from \"react-icons/ri\";\nimport styles from \"../styles/Theme.module.css\";\n\nconst IMAGE =\n  '/botmember.png';\n  const tokenId = 0;\n  const price = INITIAL_TOKEN_PRICE\n\nexport default function ProductSimple() {\n  const { contract: editionDrop } = useContract(MEMBERPASS_CONTRACT_ADDRESS);\n  const { mutate: claim, isLoading } = useClaimNFT(editionDrop);\n  const address = useAddress();\n  const networkMismatch = useNetworkMismatch();\n  const [, switchNetwork] = useNetwork();\n  \n  const alert = useToast();\n  \n  const { data: nftMetadata } = useNFT(editionDrop, tokenId);\n\n  const { data: activeClaimCondition } = useActiveClaimCondition(\n    editionDrop,\n    BigNumber.from(tokenId)\n  );\n  \n  async function mint() {\n    try {\n      claim(\n        {\n            quantity: 1,\n            to: address as string,\n            tokenId: 0,\n          },\n        {\n          onSuccess: (data) => {\n            alert({\n          title: 'Transaction Success.',\n          description: \"Your member claim, Success.\",\n          status: 'success',\n          duration: 6000,\n          isClosable: true,\n        });\n          },\n          onError: (error) => {\n            const e = error;\n            alert({\n              title: 'Gagal Claim Member...',\n\t\t\t  description: \"Member claim, Gagal.\",\n\t\t\t  status: 'error',\n\t\t\t  duration: 6000,\n\t\t\t  isClosable: true,\n            });\n          },\n        }\n      );\n    } catch (error) {\n            alert({\n              title: 'Error Unknown',\n\t\t\t  status: 'error',\n\t\t\t  duration: 6000,\n\t\t\t  isClosable: true,\n            });\n        }\n  }\n  \n  return (\n    <Center py={12} className={styles.loading}>\n      <Box style={{width: 'max-content'}}\n        role={'group'}\n        p={6}\n        maxW={'330px'}\n        w={'full'}\n        bg={useColorModeValue('white', 'gray.800')}\n        boxShadow={'2xl'}\n        rounded={'lg'}\n        pos={'relative'}\n        zIndex={1}>\n        <Box\n          rounded={'lg'}\n          mt={-12}\n          pos={'relative'}\n          height={'230px'}\n          _after={{\n            transition: 'all .3s ease',\n            content: '\"\"',\n            w: 'full',\n            h: 'full',\n            pos: 'absolute',\n            top: 5,\n            left: 0,\n            backgroundImage: `url(${IMAGE})`,\n            filter: 'blur(15px)',\n            zIndex: -1,\n          }}\n          _groupHover={{\n            _after: {\n              filter: 'blur(20px)',\n            },\n          }}>\n          <Image\n            rounded={'lg'}\n            width={282}\n            objectFit={'cover'}\n            src={IMAGE}\n          />\n        </Box>\n        <Stack pt={10} align={'center'}>\n          <Text color={'gray.500'} fontSize={'sm'} textTransform={'uppercase'}>\n            Member Only\n          </Text>\n          <Heading fontSize={'2xl'} fontFamily={'body'} fontWeight={500}>\n            Claim Member Card\n          </Heading>\n          <Stack direction={'column'} align={'center'}>\n            <Text fontWeight={800} fontSize={'xl'}>\n              {price}\n            </Text>\n\t\t\t<br/>\n{networkMismatch ? (\n<>\n            <Button leftIcon={<RiSignalWifiErrorLine />}\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              _hover={{ bg: 'blue.600' }}\n\t\t\t  className={`${styles.mainButton} ${styles.spacerBottom}`}\n              onClick={() => switchNetwork(Number(process.env.NEXT_PUBLIC_CHAIN_ID))}>\nSwitch Network\n            </Button>\n</>\n) : (\n      <Button\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              _hover={{ bg: 'blue.600' }}\n        className={`${styles.mainButton} ${styles.spacerBottom}`}\n        onClick={() =>\n          mint()\n        }\n\n      >\n    Claim {price}\n      </Button>\n)}\n          </Stack>\n        </Stack>\n      </Box>\n    </Center>\n  );\n}","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Navbar.jsx",["159","160","161","162"],[],"import {\n  useAddress,\n  useDisconnect,\n  useMetamask,\n  useWalletConnect,\n  useCoinbaseWallet,\n  useNetwork,\n  useNetworkMismatch,\n} from \"@thirdweb-dev/react\";\nimport { ReactNode, useState } from \"react\";\nimport {\n  Box,\n  Flex,\n  Avatar,\n  Link,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  useDisclosure,\n  useColorModeValue,\n  Stack,\n  useColorMode,\n  Center,\n  useToast,\n  Img,\n} from \"@chakra-ui/react\";\nimport Image from \"next/image\";\nimport { useRouter } from \"next/router\";\nimport { useContext, useRef } from \"react\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\n// import { openseaUrl, walletscanUrl } from \"../const/aLinks\";\n\nimport {\n  RiLoginCircleFill,\n  RiWallet3Fill,\n  RiShieldUserFill,\n  RiSignalWifiErrorLine,\n} from \"react-icons/ri\";\n\n\nimport hamburger from \"../public/icons/hamburger.png\";\n\nimport Sidebar1 from \"./Sidebar1\";\n\nimport Imgs from \"../public/icons/lolo.png\"\n\nconst Title = \"Alien Frens\";\n// const openseaLink = openseaUrl;\n// const scanUrl = walletscanUrl;\n// const Logo = \"https://app.alienfrens.io/_nuxt/img/logo.6ec3e4c.svg\";\n\nconst NavLink = ({ children }, { children: ReactNode }) => (\n  <Link\n    px={2}\n    py={1}\n    rounded={\"md\"}\n    _hover={{\n      textDecoration: \"none\",\n      bg: useColorModeValue(\"gray.200\", \"gray.700\"),\n    }}\n    href={\"#\"}\n  >\n    {children}\n  </Link>\n);\n\nexport default function Navbar() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const router = useRouter();\n  const toast = useToast();\n  const address = useAddress();\n  const networkMismatch = useNetworkMismatch();\n  const [, switchNetwork] = useNetwork();\n\n  const [menuIcon, setmenuIcon] = useState(false);\n\n  const color = useColorModeValue(\"gray.200\", \"gray.700\");\n\n  const connectWithMetamask = useMetamask();\n  const connectWithWalletConnect = useWalletConnect();\n  const connectWithCoinbaseWallet = useCoinbaseWallet();\n  const disconnectWallet = useDisconnect();\n\n  function handleClick() {\n    router.push(\"/stake\");\n  }\n  function marketClick() {\n    router.push(\"/listings\");\n  }\n  function homeClick() {\n    router.push(\"/\");\n  }\n  function sellingClick() {\n    router.push(\"/userBalance\");\n  }\n  function stakeClick() {\n    router.push(\"/\");\n  }\n\n  function setmenuIconfalse() {\n    setmenuIcon(false);\n  }\n  return (\n    <>\n      <div className=\"\">\n        {menuIcon ? <Sidebar1 menuIcons={setmenuIconfalse} /> : console.log(\"finish\")}\n      </div>\n      <div className=\"navz\">\n        <Box\n          bg={color}\n          px={4}\n          style={{ position: \"fixed\", width: \"100%\", zIndex: 99999, top: 0, background: \"rgb(23, 22, 27)\", padding: \"0.5rem\" }}\n        >\n          <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n            <Image src={Imgs} height={100} width={198} />\n\n            {/* <img src=\"https://app.alienfrens.io/_nuxt/img/logo.6ec3e4c.svg\" width={228} height={228} alt=\"logo\" /> */}\n\n            {/* <Box\n            onClick={homeClick}\n            cursor={\"pointer\"}\n            fontSize={\"lg\"}\n            fontWeight={700}\n          >\n            {Title}\n          </Box> */}\n\n            <Flex alignItems={\"center\"}>\n              <Stack direction={\"row\"} spacing={5}>\n                {/* <Button>\n                <Link\n                  href={openseaLink()}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  title=\"OpenSea\"\n                  style={{ height: 28 }}\n                >\n                  <Image src={Logo} width={28} height={28} alt=\"logo\" />\n                </Link>\n              </Button> */}\n                {/* <Button onClick={toggleColorMode}>\n                {colorMode === \"light\" ? (\n                  <MoonIcon size={32} />\n                ) : (\n                  <SunIcon size={32} />\n                )}\n              </Button> */}\n                <img src=\"https://gateway.pinata.cloud/ipfs/QmX2Vwkym49geStTGSLKvd6PPFfNDyRrPsgr1tsu5PMRsC\" width={55} height={45} className=\"mrt-t\" />\n\n                {\n                  address ?\n                    <Button className=\"lo\" onClick={() => {\n                      disconnectWallet(),\n                        // homeClick(),\n                        toast({\n                          title: \"Wallet Disconnected.\",\n                          description:\n                            \"You've disconnect your wallet.\",\n                          status: \"info\",\n                          duration: 3000,\n                          isClosable: true,\n                        });\n                    }}>\n                      {/* <span><img src=\"https://app.alienfrens.io/_nuxt/img/logo-sign.1364a14.svg\" alt=\"\" /></span> */}\n                      {/* <img src=\"https://gateway.pinata.cloud/ipfs/QmVgAZjazqRrETC4LFhA3t4sZt6VyesVisEqCvgRmd4gHZ\" width={25} height={25} className=\"mr-6\" /> */}\n                      <p className=\"caaa\"> Connected as </p>\n                      <p className=\"truncate\"> {address.substring(0, 7) + \"...\"} </p>\n                    </Button>\n                    :\n                    <Button className=\"cbn\" onClick={connectWithMetamask}\n                      // colorScheme={'green'}\n                      bg={'green.400'}\n                      rounded={'full'}\n                      px={6}\n                      _hover={{\n                        bg: 'green.500',\n                      }}>\n\n                      Connect\n                    </Button>\n\n                }\n\n                {/* <Menu>\n                <>\n                  {address ? (\n                    <>\n                      <MenuList alignItems={\"center\"}>\n                        <br />\n                        <Center>\n                          <RiWallet3Fill size={60} />\n                        </Center>\n                        <br />\n                        <Center>\n                          <Link\n                            href={scanUrl()}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            title=\"Wallet Scan\"\n                            style={{ height: 28 }}\n                          >\n                            <p>\n                              {address\n                                .slice(0, 3)\n                                .concat(\"\")\n                                .concat(address.slice(-4))}\n                            </p>\n                          </Link>\n                        </Center>\n                        <MenuDivider />\n                        <Center>\n                          <Link\n                            href={\"https://testnet.bnbchain.org/faucet-smart\"}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            title=\"BNB faucet\"\n                          >\n                            tBNB Faucet\n                          </Link>\n                        </Center>\n                        <MenuDivider />\n                        {networkMismatch ? (\n                          <>\n                            <MenuItem\n                              leftIcon={<RiSignalWifiErrorLine />}\n                              onClick={() =>\n                                switchNetwork(\n                                  Number(process.env.NEXT_PUBLIC_CHAIN_ID)\n                                )\n                              }\n                              colorScheme={\"blue\"}\n                            >\n                              Switch Network\n                            </MenuItem>\n                          </>\n                        ) : (\n                          <>\n                            <MenuItem onClick={stakeClick}>Dashboard</MenuItem>\n                            <MenuItem onClick={marketClick}>\n                              Marketplace\n                            </MenuItem>\n                            <MenuItem onClick={handleClick}>\n                              Listing\n                            </MenuItem>\n                            <MenuItem onClick={sellingClick}>\n                              Balance\n                            </MenuItem>\n                            <MenuItem\n                              onClick={() => {\n                                disconnectWallet(),\n                                  homeClick(),\n                                  toast({\n                                    title: \"Wallet Disconnected.\",\n                                    description:\n                                      \"You've disconnect your wallet.\",\n                                    status: \"info\",\n                                    duration: 3000,\n                                    isClosable: true,\n                                  });\n                              }}\n                            >\n                              Logout\n                            </MenuItem>\n                          </>\n                        )}\n                      </MenuList>\n                    </>\n                  ) : (\n                    <>\n                      <MenuButton\n                        as={Button}\n                        rounded={\"full\"}\n                        variant={\"link\"}\n                        cursor={\"pointer\"}\n                        minW={0}\n                      >\n                        <RiLoginCircleFill size={32} />\n                      </MenuButton>\n                      <MenuList alignItems={\"center\"}>\n                        <br />\n                        <Center>\n                          <RiWallet3Fill size={40} />\n                        </Center>\n                        <br />\n                        <Center>\n                          <p>Connect Wallet</p>\n                        </Center>\n                        <br />\n                        <MenuDivider />\n                        \n                        <MenuItem onClick={stakeClick}>Dashboard</MenuItem>\n                            <MenuItem onClick={marketClick}>\n                              Marketplace\n                            </MenuItem>\n                            <MenuItem onClick={handleClick}>\n                              Listing\n                            </MenuItem>\n                            <MenuItem onClick={sellingClick}>\n                              Balance\n                            </MenuItem>\n                      </MenuList>\n                    </>\n                  )}\n                </>\n              </Menu> */}\n\n                <button className=\"menu-btn\" onClick={() => {\n                  setmenuIcon(!menuIcon)\n                }}>\n                  <Image src={hamburger} width={42} height={32} />\n                </button>\n\n              </Stack>\n            </Flex>\n          </Flex>\n        </Box>\n        {/* <hr class=\"new4\" /> */}\n      </div>\n\n    </>\n  );\n}\n","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\NavHoverBox.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\NavItem.js",["163"],[],"import React from 'react'\r\nimport {\r\n    Flex,\r\n    Text,\r\n    Icon,\r\n    Link,\r\n    Menu,\r\n    MenuButton,\r\n    MenuList\r\n} from '@chakra-ui/react'\r\n\r\nimport NavHoverBox from '../components/NavHoverBox'\r\n\r\nimport Image from 'next/image';\r\n\r\nimport { useRouter } from \"next/router\";\r\n\r\nexport default function NavItem({ icon, title, description, active, navSize ,c_path,navSize1 }) {\r\n   \r\n    const router = useRouter();\r\n    \r\n    function rendeer(){\r\n        router.push(\"/\"+c_path);\r\n    }\r\n\r\n    return (\r\n        <Flex\r\n            mt={30}\r\n            flexDir=\"column\"\r\n            w=\"100%\"\r\n            alignItems={navSize == \"small\" ? \"center\" : \"flex-start\"}\r\n            \r\n        >\r\n            <Menu placement=\"right\">\r\n                <Link\r\n                    backgroundColor={active && \"#AEC8CA\"}\r\n                    p={3}\r\n                    borderRadius={8}\r\n                    // _hover={{ textDecor: 'none', backgroundColor: \"#AEC8CA\" }}\r\n                    w={navSize == \"large\" && \"100%\"}\r\n                >\r\n                    <MenuButton w=\"100%\" onClick={rendeer}>\r\n                        <Flex>\r\n                            <Image src={icon} className={navSize == \"small\" ? \"navsmall\" : \"navlarge\"} id=\"eeeg\" />\r\n                            <Text ml={5} className=\"sbtext\" display={navSize == \"small\" ? \"none\" : \"flex\"} id=\"tttl\" >{title}</Text>\r\n                        </Flex>\r\n                        {/* className=\"sbimg\"  */}\r\n                    </MenuButton>\r\n                </Link>\r\n                <MenuList\r\n                    py={0}\r\n                    border=\"none\"\r\n                    w={200}\r\n                    h={200}\r\n                    ml={5}\r\n                >\r\n                    {/* <NavHoverBox title={title} icon={icon} description={description} /> */}\r\n                </MenuList>\r\n            </Menu>\r\n        </Flex>\r\n    )\r\n}","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Sidebar.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\Sidebar1.js",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\staked.tsx",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\stakingfun\\index.tsx",["164"],[],"import type { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport styles from \"../../styles/Home.module.css\";\r\n// import Image from 'next/image'\r\n// import HappyTigerFour from \"../../public/icons/HappyTigerFour.png\"\r\n// import HappyOctopusFour from \"../../public/icons/HappyOctopusFour.png\"\r\n\r\nconst Home: NextPage = () => {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {/* Top Section */}\r\n      <h1 className={styles.h1 + \" \" + styles.nana}>Nana Market NFT - Mint Or Stake Your NFT</h1>\r\n      <div className={styles.nftBoxGrid}>\r\n        {/* <div\r\n          className={styles.optionSelectBox}\r\n          role=\"button\"\r\n          onClick={() => router.push(`/mint`)}\r\n        >\r\n          \r\n          <img src=\"https://i.seadn.io/gcs/files/5d6eb6c5190f7d681c615873998c3df5.png?auto=format&w=750\" className={styles.mintImg} alt=\"drop\" width={175} height={175} />\r\n          <h2 className={styles.selectBoxTitle}>Mint an NFT</h2>\r\n          <p className={styles.selectBoxDescription}>\r\n            Claim Your Nana NFT Here\r\n          </p>\r\n        </div> */}\r\n\r\n        <div\r\n          className={styles.optionSelectBox}\r\n          role=\"button\"\r\n          onClick={() => router.push(`/staked`)}\r\n        >\r\n          {/* Staking an NFT */}\r\n          <img src=\"https://i.seadn.io/gcs/files/4d7e38de2a8cdb6fb473b2a1a873bd3b.png?auto=format&w=1000\" className={styles.mintImg} alt=\"drop\" width={175} height={175} />\r\n          <h2 className={styles.selectBoxTitle}>Stake Your NFTs</h2>\r\n          <p className={styles.selectBoxDescription}>\r\n            Stake Your Nana NFT Here\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\stakingfun\\mint.tsx",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\components\\NFTCard.tsx",[],[],"C:\\Users\\Administrator\\Desktop\\MyWork\\nft_marketplace-master\\pages\\mainSwap.tsx",["165","166"],[],{"ruleId":"167","severity":1,"message":"168","line":290,"column":7,"nodeType":"169","endLine":294,"endColumn":9},{"ruleId":"167","severity":1,"message":"168","line":485,"column":21,"nodeType":"169","endLine":493,"endColumn":23},{"ruleId":"170","severity":1,"message":"171","line":485,"column":21,"nodeType":"169","endLine":493,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":355,"column":19,"nodeType":"169","endLine":359,"endColumn":21},{"ruleId":"170","severity":1,"message":"172","line":433,"column":15,"nodeType":"169","endLine":433,"endColumn":63},{"ruleId":"170","severity":1,"message":"172","line":437,"column":15,"nodeType":"169","endLine":437,"endColumn":65},{"ruleId":"173","severity":1,"message":"174","line":18,"column":7,"nodeType":"169","endLine":18,"endColumn":30},{"ruleId":"173","severity":1,"message":"174","line":158,"column":7,"nodeType":"169","endLine":158,"endColumn":22},{"ruleId":"170","severity":1,"message":"172","line":388,"column":9,"nodeType":"169","endLine":395,"endColumn":11},{"ruleId":"173","severity":1,"message":"174","line":12,"column":7,"nodeType":"169","endLine":12,"endColumn":30},{"ruleId":"167","severity":1,"message":"168","line":177,"column":21,"nodeType":"169","endLine":177,"endColumn":155},{"ruleId":"170","severity":1,"message":"171","line":177,"column":21,"nodeType":"169","endLine":177,"endColumn":155},{"ruleId":"167","severity":1,"message":"168","line":190,"column":21,"nodeType":"169","endLine":190,"endColumn":155},{"ruleId":"170","severity":1,"message":"171","line":190,"column":21,"nodeType":"169","endLine":190,"endColumn":155},{"ruleId":"170","severity":1,"message":"172","line":123,"column":11,"nodeType":"169","endLine":128,"endColumn":13},{"ruleId":"170","severity":1,"message":"172","line":120,"column":13,"nodeType":"169","endLine":120,"endColumn":58},{"ruleId":"167","severity":1,"message":"168","line":153,"column":17,"nodeType":"169","endLine":153,"endColumn":152},{"ruleId":"170","severity":1,"message":"171","line":153,"column":17,"nodeType":"169","endLine":153,"endColumn":152},{"ruleId":"170","severity":1,"message":"172","line":315,"column":19,"nodeType":"169","endLine":315,"endColumn":67},{"ruleId":"170","severity":1,"message":"172","line":44,"column":29,"nodeType":"169","endLine":44,"endColumn":116},{"ruleId":"167","severity":1,"message":"168","line":35,"column":11,"nodeType":"169","endLine":35,"endColumn":172},{"ruleId":"175","severity":2,"message":"176","line":23,"column":19,"nodeType":"177","endLine":23,"endColumn":29},{"ruleId":"173","severity":1,"message":"174","line":65,"column":7,"nodeType":"169","endLine":65,"endColumn":30},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref","react-hooks/rules-of-hooks","React Hook \"useAddress\" is called in function \"mainSwap\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","Identifier"]