[{"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\api\\generate-mint-signature.js":"1","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\index.js":"2","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\learnmore.js":"3","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\listing\\[listingId].jsx":"4","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\listings.js":"5","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\resell.tsx":"6","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\stake.tsx":"7","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\staking.tsx":"8","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\upload.js":"9","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\userBalance.tsx":"10","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\_app.js":"11","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\_document.js":"12","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\besideNavbar.jsx":"13","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Footer.jsx":"14","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\memberPage.tsx":"15","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Navbar.jsx":"16","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\NavHoverBox.js":"17","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\NavItem.js":"18","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Sidebar.js":"19","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Sidebar1.js":"20"},{"size":951,"mtime":1672402246000,"results":"21","hashOfConfig":"22"},{"size":10577,"mtime":1673089569972,"results":"23","hashOfConfig":"22"},{"size":1517,"mtime":1672402246000,"results":"24","hashOfConfig":"22"},{"size":16452,"mtime":1673641338647,"results":"25","hashOfConfig":"22"},{"size":39331,"mtime":1673641327962,"results":"26","hashOfConfig":"22"},{"size":7969,"mtime":1672402246000,"results":"27","hashOfConfig":"22"},{"size":7665,"mtime":1673289344562,"results":"28","hashOfConfig":"22"},{"size":16449,"mtime":1672402246000,"results":"29","hashOfConfig":"22"},{"size":10991,"mtime":1672402246000,"results":"30","hashOfConfig":"22"},{"size":8231,"mtime":1673646688368,"results":"31","hashOfConfig":"22"},{"size":806,"mtime":1672497215752,"results":"32","hashOfConfig":"22"},{"size":454,"mtime":1672402246000,"results":"33","hashOfConfig":"22"},{"size":4056,"mtime":1673179569453,"results":"34","hashOfConfig":"22"},{"size":2132,"mtime":1672402246000,"results":"35","hashOfConfig":"22"},{"size":4289,"mtime":1672402246000,"results":"36","hashOfConfig":"22"},{"size":10590,"mtime":1673646691331,"results":"37","hashOfConfig":"22"},{"size":1138,"mtime":1672474879038,"results":"38","hashOfConfig":"22"},{"size":1892,"mtime":1672955892760,"results":"39","hashOfConfig":"22"},{"size":3999,"mtime":1673631567743,"results":"40","hashOfConfig":"22"},{"size":4482,"mtime":1673635648454,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p57tck",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\api\\generate-mint-signature.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\index.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\learnmore.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\listing\\[listingId].jsx",["104","105","106"],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\listings.js",["107","108","109"],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\resell.tsx",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\stake.tsx",["110"],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\staking.tsx",["111"],[],"import {\n  useNetwork,\n  useNetworkMismatch,\n  ThirdwebNftMedia,\n  useAddress,\n  useTokenBalance,\n  useOwnedNFTs,\n  useContract,\n  useMetamask, useWalletConnect, useCoinbaseWallet,\n} from \"@thirdweb-dev/react\";\nimport {\n  Box,\n  Heading,\n  Container,\n  Text,\n  Button,\n  Stack,\n  Icon,\n  useColorModeValue,\n  createIcon,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n  useDisclosure,\n  Menu,\n  MenuItem,\n  MenuDivider,\n  useToast,\n  Flex,\n  Tag,\n  Spinner,\n  Avatar,\n  Center,\n  Image,\n  SimpleGrid, Tabs, TabList, TabPanels, Tab, TabPanel\n} from '@chakra-ui/react';\nimport { BigNumber, ethers } from \"ethers\";\nimport type { NextPage } from \"next\";\nimport { useRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport React, { useContext, useRef, useEffect, useState } from \"react\";\nimport { NFT_COLLECTION_ADDRESS, TOKEN_DROP_ADDRESS, MEMBERPASS_CONTRACT_ADDRESS, NFT_STAKING_ADDRESS } from \"../const/contractAddresses\";\nimport MintMember from \"../components/memberPage\";\nimport styles from \"../styles/Theme.module.css\";\n\nconst nftCollection = NFT_COLLECTION_ADDRESS;\nconst tokenContractAddress = TOKEN_DROP_ADDRESS;\nconst stakingContractAddress = NFT_STAKING_ADDRESS;\n\nconst Stake: NextPage = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef();\n  // Wallet Connection Hooks\n  const address = useAddress();\n  const router = useRouter();\n\n  const networkMismatch = useNetworkMismatch();\n  const [, switchNetwork] = useNetwork();\n  const color = useColorModeValue('gray.800', 'gray.300');\n  const bgColor = useColorModeValue('white', 'gray.800');\n  \n  const connectWithMetamask = useMetamask();\n  const connectWithWalletConnect = useWalletConnect();\n  const connectWithCoinbaseWallet = useCoinbaseWallet();\n\n  const Toast = useToast({\n    position: 'top',\n    title: 'Salah Jaringan',\n    containerStyle: {\n      maxWidth: '100%',\n    },\n  })\n  \n  const { contract: editionDrop } = useContract(\n    MEMBERPASS_CONTRACT_ADDRESS,\n    \"edition-drop\"\n  );\n\n  // Contract Hooks\n  const { contract: nftCollection } = useContract(\n    NFT_COLLECTION_ADDRESS,\n    \"nft-collection\"\n  );\n\n  const { contract: tokenContract } = useContract(\n    TOKEN_DROP_ADDRESS,\n    \"token\"\n  );\n\n  const { contract } = useContract(stakingContractAddress);\n\n  // Load Unstaked NFTs\n  const { data: ownedNfts } = useOwnedNFTs(nftCollection, address);\n\n  // Load Balance of Token\n  const { data: tokenBalance } = useTokenBalance(tokenContract, address);\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Custom contract functions\n  ///////////////////////////////////////////////////////////////////////////\n  const [stakedNfts, setStakedNfts] = useState<any[]>([]);\n  const [claimableRewards, setClaimableRewards] = useState<BigNumber>();\n\n  useEffect(() => {\n    if (!contract) return;\n\n    async function loadStakedNfts() {\n      const stakedTokens = await contract?.call(\"getStakedTokens\", address);\n\n      // For each staked token, fetch it from the sdk\n      const stakedNfts = await Promise.all(\n        stakedTokens?.map(\n          async (stakedToken: { staker: string; tokenId: BigNumber }) => {\n            const nft = await nftCollection?.get(stakedToken.tokenId);\n            return nft;\n          }\n        )\n      );\n\n      setStakedNfts(stakedNfts);\n      console.log(\"setStakedNfts\", stakedNfts);\n    }\n\n    if (address) {\n      loadStakedNfts();\n    }\n  }, [address, contract, nftCollection]);\n\n  useEffect(() => {\n    if (!contract || !address) return;\n\n    async function loadClaimableRewards() {\n      const cr = await contract?.call(\"availableRewards\", address);\n      console.log(\"Loaded claimable rewards\", cr);\n      setClaimableRewards(cr);\n    }\n\n    loadClaimableRewards();\n  }, [address, contract]);\n\n  const {\n    data: memberNfts,\n    isLoading,\n    isError,\n  } = useOwnedNFTs(editionDrop, address);\n\n  if (!address) {\n    return (\n<>\n    <div className={styles.loading} style={{width: '100%'}}>\n      {!address ? (\n\t\t  <div className={styles.loading} style={{marginTop: '-96px'}}>\n      <h1 className={styles.h1} style={{fontFamily: 'Caveat'}}>& <br/>Stake Your NFTs</h1>\n\n      <br className={`${styles.divider} ${styles.spacerTop}`} />\n        <Stack flex={2} direction={{ md: 'row', base: 'column'}} spacing={{ base: 5, md: 5 }}>\n            <Button onClick={onOpen}\n              colorScheme={'green'}\n              bg={'green.400'}\n              rounded={'full'}\n              px={6}\n              _hover={{\n                bg: 'green.500',\n              }}>\n              Connect Wallet\n            </Button>\n\t\t\t<AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n\t\tmotionPreset='slideInBottom'\n\t\tisCentered\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent margin={'auto 10px'}>\n            <AlertDialogHeader fontSize='lg' fontWeight='bold'>\n              Connect Wallet\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              <Menu>\n                  <MenuDivider />\n                  <MenuItem gap='5' onClick={() => {connectWithMetamask(), onClose()}} className={styles.hoverItem}>Metamask\n\t\t\t\t  <Tag size='sm' variant='solid' colorScheme='blue' borderRadius='full'>\n\t\t\t\t\t  Recomended\n\t\t\t\t\t</Tag>\n\t\t\t\t\t</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithWalletConnect(), onClose()}} className={styles.hoverItem}>WalletConnect</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithCoinbaseWallet(), onClose()}} className={styles.hoverItem}>CoinBase</MenuItem>\n                  <MenuDivider />\n              </Menu>\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose} colorScheme='red'>\n                Cancel\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n            <Box style={{position: 'absolute', top: '-35px'}}>\n              <Icon\n                as={Arrow}\n                color={color}\n                w={71}\n                position={'absolute'}\n                right={-145}\n                top={'40px'}\n                transform={'rotate(-100deg)'}\n              />\n              <Text\n                fontSize={'lg'}\n                fontFamily={'Caveat'}\n                position={'absolute'}\n                right={'-105px'}\n                top={'-8px'}\n                transform={'rotate(10deg)'}>\n                Sign Your Wallet\n              </Text>\n            </Box>\n</Stack>\n\t\t  </div>\n      ) : (\n        <>\n        </>\n      )}\n\t</div>\n</>\n    );\n  }\n\n  // 1. Loading\n  if (isLoading) {\n    return \n\t\t  <div className={styles.loading}>\n\t\t  <Spinner\n\t\t\t  thickness='4px'\n\t\t\t  speed='0.65s'\n\t\t\t  emptyColor='gray.200'\n\t\t\t  color='blue.500'\n\t\t\t  size='xl' />\n          </div>;\n  }\n  \n  // Something went wrong\n  if (!memberNfts || isError) {\n    return <div className={styles.loading}>Error...!</div>;\n  }\n\n  // 2. No NFTs - mint page\n  if (memberNfts.length === 0 || networkMismatch) {\n    return (\n<>\n        <MintMember />\n</>\n    );\n  }\n  \n  // 3. Has NFT already - show button to take to staking\n  ///////////////////////////////////////////////////////////////////////////\n  // Write Functions\n  ///////////////////////////////////////////////////////////////////////////\n  async function stakeNft(id: string) {\n    if (!address) return;\n\n    const isApproved = await nftCollection?.isApproved(\n      address,\n      stakingContractAddress\n    );\n    // If not approved, request approval\n    if (!isApproved) {\n      await nftCollection?.setApprovalForAll(stakingContractAddress, true);\n    }\n    const stake = await contract?.call(\"stake\", id);\n  }\n\n  async function withdraw(id: BigNumber) {\n    const withdraw = await contract?.call(\"withdraw\", id);\n  }\n\n  async function claimRewards() {\n    const claim = await contract?.call(\"claimRewards\");\n  }\n\n  if (isLoading) {\n\t\t  <div className={styles.loading}>\n\t\t  <Spinner\n\t\t\t  thickness='4px'\n\t\t\t  speed='0.65s'\n\t\t\t  emptyColor='gray.200'\n\t\t\t  color='blue.500'\n\t\t\t  size='xl' />\n          </div>;\n  }\n\n  return (\n    <div className={styles.StakeContainer}>\n\n      {!address ? (\n\t\t  <div className={styles.loading} style={{marginTop: '-96px'}}>\n      <h1 className={styles.h1} style={{fontFamily: 'Caveat'}}>& <br/>Stake Your NFTs</h1>\n\n      <br className={`${styles.divider} ${styles.spacerTop}`} />\n        <Stack flex={2} direction={{ md: 'row', base: 'column'}} spacing={{ base: 5, md: 5 }}>\n            <Button onClick={onOpen}\n              colorScheme={'green'}\n              bg={'green.400'}\n              rounded={'full'}\n              px={6}\n              _hover={{\n                bg: 'green.500',\n              }}>\n              Connect Wallet\n            </Button>\n\t\t\t<AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n\t\tmotionPreset='slideInBottom'\n\t\tisCentered\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize='lg' fontWeight='bold'>\n              Connect Wallet\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              <Menu>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithMetamask(), onClose()}} className={styles.hoverItem}>Metamask</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithWalletConnect(), onClose()}} className={styles.hoverItem}>WalletConnect</MenuItem>\n                  <MenuDivider />\n                  <MenuItem onClick={() => {connectWithCoinbaseWallet(), onClose()}} className={styles.hoverItem}>CoinBase</MenuItem>\n                  <MenuDivider />\n              </Menu>\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose} colorScheme='red'>\n                Cancel\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n            <Box style={{position: 'absolute', top: '-35px'}}>\n              <Icon\n                as={Arrow}\n                color={color}\n                w={71}\n                position={'absolute'}\n                right={-145}\n                top={'55px'}\n                transform={'rotate(-100deg)'}\n              />\n              <Text\n                fontSize={'lg'}\n                fontFamily={'Caveat'}\n                position={'absolute'}\n                right={'-105px'}\n                top={'10px'}\n                transform={'rotate(10deg)'}>\n                Sign Your Wallet\n              </Text>\n            </Box>\n</Stack>\n\t\t  </div>\n      ) : (\n        <>\n    <Container maxW={'5xl'} py={12}>\n      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10} marginBottom={{ base: 20, md: 0 }}>\n    <Center py={6}>\n      <Box\n        maxW={'100%'}\n        w={'full'}\n        bg={bgColor}\n        boxShadow={'2xl'}\n        rounded={'md'}\n        overflow={'hidden'}>\n        <Image\n          h={'120px'}\n          w={'full'}\n          src={\n            'https://images.unsplash.com/photo-1612865547334-09cb8cb455da?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80'\n          }\n          objectFit={'cover'}\n        />\n        <Flex justify={'center'} mt={-12}>\n          <Avatar\n            size={'xl'}\n            src={\n              'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=faces&fit=crop&h=200&w=200&ixid=eyJhcHBfaWQiOjE3Nzg0fQ'\n            }\n            style={{\n              border: '2px solid white',\n            }}\n          />\n        </Flex>\n\n        <Box p={6}>\n          <Stack spacing={0} align={'center'} mb={5}>\n            <Heading fontSize={'2xl'} fontWeight={500} fontFamily={'body'}>\n              Your Token\n            </Heading>\n            <Text color={'gray.500'}>Staking Reward</Text>\n          </Stack>\n\n          <Stack direction={{ md: 'column', base: 'column'}} justify={'center'} spacing={6}>\n            <Stack spacing={0} align={'center'}>\n              <Text fontWeight={600}>\n                <b>{tokenBalance?.displayValue}</b> {tokenBalance?.symbol}</Text>\n              <Text fontSize={'sm'} color={'gray.500'}>\n                Balance\n              </Text>\n            </Stack>\n            <Stack spacing={0} align={'center'}>\n              <Text fontWeight={600}>\n                <b>\n                  {!claimableRewards\n                    ? \"Loading...\"\n                    : ethers.utils.formatUnits(claimableRewards, 18)}\n                </b>{\" \"}\n                {tokenBalance?.symbol}</Text>\n              <Text fontSize={'sm'} color={'gray.500'}>\n                Claimable\n              </Text>\n            </Stack>\n          </Stack>\n\n          <Button\n            onClick={() => claimRewards()}\n            w={'full'}\n            mt={8}\n            bg={bgColor}\n            color={'white'}\n            rounded={'md'}\n            _hover={{\n              transform: 'translateY(-2px)',\n              boxShadow: 'lg',\n            }}>\n            Claim Rewards\n          </Button>\n        </Box>\n      </Box>\n    </Center>\n\t\n      <Box my={6}\n        maxW={'100%'}\n        w={'full'}\n        bg={bgColor}\n        boxShadow={'2xl'}\n        rounded={'md'}\n        overflow={'hidden'}>\n<Tabs isFitted variant='enclosed'>\n  <TabList mb='1em'>\n    <Tab>Your Unstaked NFTs</Tab>\n    <Tab>Your Staked NFTs</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>\n            {ownedNfts?.map((nft) => (\n              <div className={styles.nftBox} key={nft.metadata.id.toString()}>\n                <ThirdwebNftMedia\n                  metadata={nft.metadata}\n                  className={styles.nftMedia}\n                />\n                <h3>{nft.metadata.name}</h3>\n                <button\n                  className={`${styles.mainButton} ${styles.spacerBottom}`}\n                  onClick={() => stakeNft(nft.metadata.id)}\n                >\n                  Stake\n                </button>\n              </div>\n            ))}\n    </TabPanel>\n    <TabPanel>\n            {stakedNfts?.map((nft) => (\n              <div className={styles.nftBox} key={nft.metadata.id.toString()}>\n                <ThirdwebNftMedia\n                  metadata={nft.metadata}\n                  className={styles.nftMedia}\n                />\n                <h3>{nft.metadata.name}</h3>\n                <button\n                  className={`${styles.mainButton} ${styles.spacerBottom}`}\n                  onClick={() => withdraw(nft.metadata.id)}\n                >\n                  Withdraw\n                </button>\n              </div>\n            ))}\n    </TabPanel>\n  </TabPanels>\n</Tabs>\n        </Box>\n      </SimpleGrid>\n    </Container>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Stake;\n\nconst Arrow = createIcon({\n  displayName: 'Arrow',\n  viewBox: '0 0 72 24',\n  path: (\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M0.600904 7.08166C0.764293 6.8879 1.01492 6.79004 1.26654 6.82177C2.83216 7.01918 5.20326 7.24581 7.54543 7.23964C9.92491 7.23338 12.1351 6.98464 13.4704 6.32142C13.84 6.13785 14.2885 6.28805 14.4722 6.65692C14.6559 7.02578 14.5052 7.47362 14.1356 7.6572C12.4625 8.48822 9.94063 8.72541 7.54852 8.7317C5.67514 8.73663 3.79547 8.5985 2.29921 8.44247C2.80955 9.59638 3.50943 10.6396 4.24665 11.7384C4.39435 11.9585 4.54354 12.1809 4.69301 12.4068C5.79543 14.0733 6.88128 15.8995 7.1179 18.2636C7.15893 18.6735 6.85928 19.0393 6.4486 19.0805C6.03792 19.1217 5.67174 18.8227 5.6307 18.4128C5.43271 16.4346 4.52957 14.868 3.4457 13.2296C3.3058 13.0181 3.16221 12.8046 3.01684 12.5885C2.05899 11.1646 1.02372 9.62564 0.457909 7.78069C0.383671 7.53862 0.437515 7.27541 0.600904 7.08166ZM5.52039 10.2248C5.77662 9.90161 6.24663 9.84687 6.57018 10.1025C16.4834 17.9344 29.9158 22.4064 42.0781 21.4773C54.1988 20.5514 65.0339 14.2748 69.9746 0.584299C70.1145 0.196597 70.5427 -0.0046455 70.931 0.134813C71.3193 0.274276 71.5206 0.70162 71.3807 1.08932C66.2105 15.4159 54.8056 22.0014 42.1913 22.965C29.6185 23.9254 15.8207 19.3142 5.64226 11.2727C5.31871 11.0171 5.26415 10.5479 5.52039 10.2248Z\"\n      fill=\"currentColor\"\n    />\n  ),\n});\n","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\upload.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\userBalance.tsx",["112","113","114","115"],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\_app.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\pages\\_document.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\besideNavbar.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Footer.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\memberPage.tsx",["116"],[],"import {\n  Box,\n  Center,\n  useColorModeValue,\n  Heading,\n  Text,\n  Stack,\n  Image,\n  useToast,\n  Button\n} from '@chakra-ui/react';\nimport {\n  ThirdwebNftMedia,\n  useAddress,\n  useNetwork,\n  useNetworkMismatch,\n  useClaimNFT,\n  useActiveClaimCondition,\n  useContract,\n  useNFT\n} from \"@thirdweb-dev/react\";\nimport { BigNumber } from \"ethers\";\nimport React, { useState } from \"react\";\nimport { MEMBERPASS_CONTRACT_ADDRESS, INITIAL_TOKEN_PRICE } from \"../const/contractAddresses\";\nimport { RiSignalWifiErrorLine } from \"react-icons/ri\";\nimport styles from \"../styles/Theme.module.css\";\n\nconst IMAGE =\n  '/botmember.png';\n  const tokenId = 0;\n  const price = INITIAL_TOKEN_PRICE\n\nexport default function ProductSimple() {\n  const { contract: editionDrop } = useContract(MEMBERPASS_CONTRACT_ADDRESS);\n  const { mutate: claim, isLoading } = useClaimNFT(editionDrop);\n  const address = useAddress();\n  const networkMismatch = useNetworkMismatch();\n  const [, switchNetwork] = useNetwork();\n  \n  const alert = useToast();\n  \n  const { data: nftMetadata } = useNFT(editionDrop, tokenId);\n\n  const { data: activeClaimCondition } = useActiveClaimCondition(\n    editionDrop,\n    BigNumber.from(tokenId)\n  );\n  \n  async function mint() {\n    try {\n      claim(\n        {\n            quantity: 1,\n            to: address as string,\n            tokenId: 0,\n          },\n        {\n          onSuccess: (data) => {\n            alert({\n          title: 'Transaction Success.',\n          description: \"Your member claim, Success.\",\n          status: 'success',\n          duration: 6000,\n          isClosable: true,\n        });\n          },\n          onError: (error) => {\n            const e = error;\n            alert({\n              title: 'Gagal Claim Member...',\n\t\t\t  description: \"Member claim, Gagal.\",\n\t\t\t  status: 'error',\n\t\t\t  duration: 6000,\n\t\t\t  isClosable: true,\n            });\n          },\n        }\n      );\n    } catch (error) {\n            alert({\n              title: 'Error Unknown',\n\t\t\t  status: 'error',\n\t\t\t  duration: 6000,\n\t\t\t  isClosable: true,\n            });\n        }\n  }\n  \n  return (\n    <Center py={12} className={styles.loading}>\n      <Box style={{width: 'max-content'}}\n        role={'group'}\n        p={6}\n        maxW={'330px'}\n        w={'full'}\n        bg={useColorModeValue('white', 'gray.800')}\n        boxShadow={'2xl'}\n        rounded={'lg'}\n        pos={'relative'}\n        zIndex={1}>\n        <Box\n          rounded={'lg'}\n          mt={-12}\n          pos={'relative'}\n          height={'230px'}\n          _after={{\n            transition: 'all .3s ease',\n            content: '\"\"',\n            w: 'full',\n            h: 'full',\n            pos: 'absolute',\n            top: 5,\n            left: 0,\n            backgroundImage: `url(${IMAGE})`,\n            filter: 'blur(15px)',\n            zIndex: -1,\n          }}\n          _groupHover={{\n            _after: {\n              filter: 'blur(20px)',\n            },\n          }}>\n          <Image\n            rounded={'lg'}\n            width={282}\n            objectFit={'cover'}\n            src={IMAGE}\n          />\n        </Box>\n        <Stack pt={10} align={'center'}>\n          <Text color={'gray.500'} fontSize={'sm'} textTransform={'uppercase'}>\n            Member Only\n          </Text>\n          <Heading fontSize={'2xl'} fontFamily={'body'} fontWeight={500}>\n            Claim Member Card\n          </Heading>\n          <Stack direction={'column'} align={'center'}>\n            <Text fontWeight={800} fontSize={'xl'}>\n              {price}\n            </Text>\n\t\t\t<br/>\n{networkMismatch ? (\n<>\n            <Button leftIcon={<RiSignalWifiErrorLine />}\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              _hover={{ bg: 'blue.600' }}\n\t\t\t  className={`${styles.mainButton} ${styles.spacerBottom}`}\n              onClick={() => switchNetwork(Number(process.env.NEXT_PUBLIC_CHAIN_ID))}>\nSwitch Network\n            </Button>\n</>\n) : (\n      <Button\n              colorScheme={'blue'}\n              bg={'blue.400'}\n              _hover={{ bg: 'blue.600' }}\n        className={`${styles.mainButton} ${styles.spacerBottom}`}\n        onClick={() =>\n          mint()\n        }\n\n      >\n    Claim {price}\n      </Button>\n)}\n          </Stack>\n        </Stack>\n      </Box>\n    </Center>\n  );\n}","C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Navbar.jsx",["117","118","119","120"],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\NavHoverBox.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\NavItem.js",["121"],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Sidebar.js",[],[],"C:\\Users\\Administrator\\Desktop\\nft_marketplace-master\\components\\Sidebar1.js",[],[],{"ruleId":"122","severity":2,"message":"123","line":157,"column":9,"nodeType":"124","messageId":"125","endLine":157,"endColumn":21,"fix":"126"},{"ruleId":"127","severity":1,"message":"128","line":159,"column":7,"nodeType":"129","endLine":163,"endColumn":9},{"ruleId":"130","severity":1,"message":"131","line":354,"column":27,"nodeType":"129","endLine":361,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":401,"column":19,"nodeType":"129","endLine":405,"endColumn":21},{"ruleId":"130","severity":1,"message":"131","line":479,"column":15,"nodeType":"129","endLine":479,"endColumn":63},{"ruleId":"130","severity":1,"message":"131","line":483,"column":15,"nodeType":"129","endLine":483,"endColumn":65},{"ruleId":"132","severity":1,"message":"133","line":156,"column":7,"nodeType":"129","endLine":156,"endColumn":22},{"ruleId":"130","severity":1,"message":"131","line":388,"column":9,"nodeType":"129","endLine":395,"endColumn":11},{"ruleId":"127","severity":1,"message":"128","line":177,"column":21,"nodeType":"129","endLine":177,"endColumn":155},{"ruleId":"130","severity":1,"message":"134","line":177,"column":21,"nodeType":"129","endLine":177,"endColumn":155},{"ruleId":"127","severity":1,"message":"128","line":190,"column":21,"nodeType":"129","endLine":190,"endColumn":155},{"ruleId":"130","severity":1,"message":"134","line":190,"column":21,"nodeType":"129","endLine":190,"endColumn":155},{"ruleId":"130","severity":1,"message":"131","line":123,"column":11,"nodeType":"129","endLine":128,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":118,"column":11,"nodeType":"129","endLine":118,"endColumn":59},{"ruleId":"127","severity":1,"message":"128","line":151,"column":15,"nodeType":"129","endLine":151,"endColumn":150},{"ruleId":"130","severity":1,"message":"134","line":151,"column":15,"nodeType":"129","endLine":151,"endColumn":150},{"ruleId":"130","severity":1,"message":"131","line":313,"column":12,"nodeType":"129","endLine":313,"endColumn":60},{"ruleId":"130","severity":1,"message":"131","line":44,"column":29,"nodeType":"129","endLine":44,"endColumn":116},"react/no-unknown-property","Unknown property 'class' found, use 'className' instead","JSXAttribute","unknownPropWithStandardName",{"range":"135","text":"136"},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",[3988,3993],"className"]